# Notes about SoleLogics structure.

##########################
#        syntax.jl       #
##########################

#### Letter ####
Letter{A}
ariety(::Letter)

#### Alphabet ####
AbstractAlphabet{A} <: AbstractVector{Letter{A}} # AbstractVector interface has to be implemented
    # getters and traits involved
    is_complete(...)
    letters(complete alphabet) = collect(...)
    letters(non-complete alphabet, args...) = error
    is_listable(...)
    in_alphabet(::AbstractAlphabet{A}, Letter{A})
    is_infinite(...)
    countable(...)

# AbstractAlphabet children types
ExplicitAlphabet{A} # Wraps a Vector{Letter{A}}
LazyAlphabet
InfiniteAlphabet{A}
NonCompleteDimensionalAlphabet

    #### Alphabet: new things (5 december) ####
    AbstractDimensionaAlphabet
        DimensionalAlphabet # Wraps a Vector{L}
        FullUmbounded       # 4 parameters are combined using product
                            #but A is infinite (thresholds are needed to enumerate things)

#### Operators ####
AbstractOperator
    ariety(...) = error
    is_constant(...)
    is_unary(...)
    is_binary(...)

NamedOperator{T} # \top, \bot, \wedge ...
BaseOperators = Union{...}

#### Grammar ####
AbstractGrammar{At, O} # Alphabet type, Operators
    alphabet(...)
    letters(...) = error
    operators(...)
    formulas(...) = error # rand(Grammar, rng) dispatch to generate a new valid formula

ExplicitCompleteGrammar{At, O}
    - alphabet

    #### Grammar: new things (5 december) ####
    BNFCompleteGrammar # Backus Naur Form

#### Syntax node ####
SyntaxNode{T, G} # Wrapped-token type, Grammar

##########################
#      semantics.jl      #
##########################

#### Algebra ####
TruthValue = Type

AbstractAlgebra
    domain(...) = error
    domain_type(...)::TruthValue = eltype(domain(...))
    is_crisp()

BooleanAlgebra # Singleton whose domain is [true,false], domain_type is Bool and is_crisp is true

##########################
#        logic.jl        #
##########################

#### Logic ####
Logic{At, O, Al}
BaseLogic{At, O, Al}
    - grammar::G{At, O}

#### Formulas ####
Formula{L}
    convert(SyntaxNode, Formula)
    convert(Formula, SyntaxNode)

#### Model ####
Model{L}
    goes_with(::Model, ::Logic) = false
    check(Formula, Model)
    provides_specific_check(...) = false
    check(Formula, Model, args...) = provides_specific_check(...) ? error() : error()

PropositionalLogic{At, O, Al} <: Logic{At, O, Al}

TruthDictionary{L} <: Model{L}
    goes_with(::PropositionalLogic) = true
    check(::Formula{L}, ::TruthDictionary)
    check(::SyntaxNode{...}, ::TruthDictionary) # SyntaxNode is converted to Formula, then the new dispatch is applied
    check(::Letter, ::TruthDict)

#### Relations ####
Relation
RelationalOperator
    relation(op::RelationalOperator) = op.relation
DiamondRelationalOperator
BoxRelationalOperator
    is_modal(...)


To be continued ...

##########################
#        traits.jl       #
##########################
# Things that could be moved in a traits.jl file.

is_complete(...)
is_infinite(...)

is_constant(...)
is_unary(...)
is_binary(...)

is_modal(...)

is_crisp()
is_fuzzy()

letters()

##########################
#       Still TODO       #
##########################
Kripke Model (single/multi)
Ontologies (Geometry, Dimensional)
Model checking

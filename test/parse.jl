import SoleLogics: arity

@testset "Parsing" begin

# testing utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function test_parsing_equivalence(f::SyntaxTree)
    @test syntaxstring(f) == syntaxstring(parsetree(syntaxstring(f)))
    @test syntaxstring(f; function_notation = true) ==
        syntaxstring(
            parseformula(
                syntaxstring(f; function_notation = true);
                function_notation = true
            );
            function_notation = true
        )
end

# simple tests ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@test_throws ErrorException parsetree("")
@test_nowarn parsetree("p")
@test_nowarn parsetree("âŠ¤")

@test parsetree("Â¬pâˆ§q") == parsetree("Â¬(p)âˆ§q")
@test parsetree("Â¬pâˆ§q") != parsetree("Â¬(pâˆ§q)")

@test_nowarn parsebaseformula("p")

@test_nowarn Â¬ parsebaseformula("p")
@test_nowarn Â¬ parsetree("p")
@test_nowarn Â¬ parsetree("(sâˆ§z)", propositionallogic())
@test_nowarn Â¬ parsebaseformula("p", propositionallogic())

@test_nowarn parsetree("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", [NEGATION, CONJUNCTION])
@test_nowarn parsetree("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", [NEGATION])
@test_nowarn parsetree("Â¬pâˆ§qâˆ§{Â¬sâˆ§Â¬z}",
    opening_parenthesis="{", closing_parenthesis="}")
@test_nowarn parsetree("Â¬pâˆ§qâˆ§ A Â¬sâˆ§Â¬z    B",
    opening_parenthesis="A", closing_parenthesis="B")

@test operatorstype(
        logic(parsebaseformula("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", [BOX]))) <: SoleLogics.BaseModalOperators
@test !(operatorstype(
    logic(parsebaseformula("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", [BOX]))) <: SoleLogics.BasePropositionalOperators)
@test !(operatorstype(logic(
    parsebaseformula("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", modallogic()))) <: SoleLogics.BasePropositionalOperators)
@test (@test_nowarn operatorstype(
    logic(parsebaseformula("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)"))) <: SoleLogics.BasePropositionalOperators)

@test_nowarn parsetree("Â¬pâˆ§qâ†’(Â¬sâˆ§Â¬z)")

@test syntaxstring(parsetree("âŸ¨GâŸ©p")) == "âŸ¨GâŸ©p"
@test syntaxstring(parsetree("âŸ¨GâŸ©(p)"); remove_redundant_parentheses = false) == "âŸ¨GâŸ©(p)"

@test syntaxstring(parsetree("[G]p")) == "[G]p"
@test syntaxstring(parsetree("[G]p"); remove_redundant_parentheses = false) == "[G](p)"

@test_nowarn parsetree("âŸ¨GâŸ©p")

@test alphabet(logic(parsebaseformula("pâ†’q"))) == AlphabetOfAny{String}()


# function notation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@test syntaxstring(parsetree("pâˆ§q"); function_notation = true) == "âˆ§(p, q)"
@test syntaxstring(parsetree("pâ†’q"); function_notation = true) == "â†’(p, q)"

@test filter(!isspace, syntaxstring(parsetree("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)");
    function_notation = true)) == "âˆ§(Â¬(p),âˆ§(q,âˆ§(Â¬(s),Â¬(z))))"

@test_nowarn parsetree("â†’(âˆ§(Â¬p, q), âˆ§(Â¬s, Â¬z))", function_notation=true)
@test_nowarn parsetree("â†’(âˆ§(Â¬p; q); âˆ§(Â¬s; Â¬z))",
    function_notation=true, arg_delim = ";")
@test_nowarn parsetree("â†’{âˆ§{Â¬p; q}; âˆ§{Â¬s; Â¬z}}", function_notation=true,
    opening_parenthesis = "{", closing_parenthesis = "}",
    arg_delim = ";")


@test filter(!isspace, syntaxstring(parsetree("Â¬pâˆ§qâ†’(Â¬sâˆ§Â¬z)");
    function_notation = true)) == "â†’(âˆ§(Â¬(p),q),âˆ§(Â¬(s),Â¬(z)))"
@test filter(!isspace, syntaxstring(
    parsetree("Â¬pâˆ§qâ†’AÂ¬sâˆ§Â¬zB",
        opening_parenthesis = "A",
        closing_parenthesis = "B");
    function_notation = true)) == "â†’(âˆ§(Â¬(p),q),âˆ§(Â¬(s),Â¬(z)))"
@test_nowarn parsetree("Â¬pâˆ§qâ†’     (Â¬sâˆ§Â¬z)")
@test parsetree("â–¡pâˆ§   qâˆ§(â–¡sâˆ§â—Šz)", [BOX]) == parsetree("â–¡pâˆ§   qâˆ§(â–¡sâˆ§â—Šz)")
@test syntaxstring(parsetree("â—Š â—Š â—Š â—Š pâˆ§q"); function_notation = true) == "âˆ§(â—Š(â—Š(â—Š(â—Š(p)))), q)"
@test syntaxstring(parsetree("Â¬Â¬Â¬ â–¡â–¡â–¡ â—Šâ—Šâ—Š p âˆ§ Â¬Â¬Â¬ q"); function_notation = true) ==
    "âˆ§(Â¬(Â¬(Â¬(â–¡(â–¡(â–¡(â—Š(â—Š(â—Š(p))))))))), Â¬(Â¬(Â¬(q))))"

fxs = [
    "(Â¬(Â¬(âŸ¨GâŸ©(q))) â†’ (([G](p)) âˆ§ ([G](q))))", #Â¬((Â¬(âŸ¨GâŸ©(q))) â†’ (([G](p)) âˆ§ ([G](q))))
    "((Â¬(q âˆ§ q)) âˆ§ ((p âˆ§ p) âˆ§ (q â†’ q))) â†’ ([G]([G](âŸ¨GâŸ©(p))))",
    "((âŸ¨GâŸ©(âŸ¨GâŸ©(q))) âˆ§ (Â¬([G](p)))) â†’ (((q â†’ p) â†’ (Â¬(q))) âˆ§ (Â¬([G](q))))",
    "[G](Â¬(âŸ¨GâŸ©(p âˆ§ q)))",
    "âŸ¨GâŸ©(((Â¬(âŸ¨GâŸ©((q âˆ§ p) â†’ (Â¬(q))))) âˆ§ (((Â¬(q â†’ q)) â†’ ((q â†’ p) â†’ (Â¬(q))))" *
    "âˆ§ (((Â¬(p)) âˆ§ (âŸ¨GâŸ©(p))) â†’ (Â¬(âŸ¨GâŸ©(q)))))) âˆ§ ((Â¬(([G](p âˆ§ q)) â†’ (Â¬(p â†’ q)))) â†’" *
    "([G](([G](qâˆ§ q)) âˆ§ ([G](q â†’ p))))))"
]
[test_parsing_equivalence(parsetree(f)) for f in fxs]

fxs = ["â†’(â†’(q, p), Â¬q)", "âˆ§(âˆ§(q, p), Â¬q)"]
[test_parsing_equivalence(parseformula(f, function_notation = true)) for f in fxs ]

# malformed input ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@test_throws ErrorException parsetree("")
@test_throws ErrorException parsetree("Â¬pâ—Š")
@test_throws ErrorException parsetree("Â¬pâ—Šq")
@test_throws ErrorException parsetree("â—ŠÂ¬pâ—Š")
@test_throws ErrorException parsetree("â—ŠÂ¬pâ—Šq")
@test_throws ErrorException parsetree("(pâˆ§q", [NEGATION, CONJUNCTION])
@test_throws ErrorException parsetree("))))", [CONJUNCTION])
@test_throws ErrorException parsetree("âŸ¨GâŸ©p Â¬âŸ¨GâŸ©q")
@test_throws ErrorException parsetree("Â¬[[G]]p")

@test_throws ErrorException parsetree(""; function_notation = true)
@test_throws ErrorException parsetree("Â¬pâ—Š"; function_notation = true)
@test_throws ErrorException parsetree("Â¬pâ—Šq"; function_notation = true)
@test_throws ErrorException parsetree("â—ŠÂ¬pâ—Š"; function_notation = true)
@test_throws ErrorException parsetree("â—ŠÂ¬pâ—Šq"; function_notation = true)
@test_throws ErrorException parsetree("(pâˆ§q", [NEGATION, CONJUNCTION];
    function_notation = true)
@test_throws ErrorException parsetree("))))", [CONJUNCTION];
    function_notation = true)
@test_throws ErrorException parsetree("Â¬[[G]]p"; function_notation = true)

@test_throws ErrorException parsetree("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", opening_parenthesis="{")
@test_throws ErrorException parsetree("Â¬pâˆ§qâˆ§{Â¬sâˆ§Â¬z)",
    opening_parenthesis="{", closing_parenthesis="}")
@test_throws ErrorException parsetree("Â¬pâˆ§qâˆ§ C Â¬sâˆ§Â¬z    B",
    opening_parenthesis="A", closing_parenthesis="B")

@test_throws ErrorException parsetree("Â¬pâˆ§qâ†’ |Â¬sâˆ§Â¬z|",
    opening_parenthesis = "|", closing_parenthesis = "|")

# parsing propositions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@test_nowarn parsetree("Â¬1â†’0";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))
@test_nowarn parsetree("Â¬0.42âˆ§1";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))
@test_nowarn parsetree("Â¬-96";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))

@test_nowarn parsetree("â†’(Â¬1,0)";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))),
    function_notation = true)
@test_nowarn parsetree("â†’(Â¬1;0)";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))),
    function_notation = true, arg_delim = ";")
@test_nowarn parsetree("â†’(Â¬1/0)";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))),
    function_notation = true, arg_delim = "/")
@test_nowarn parsetree("âˆ§(Â¬0.42,1)";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))),
    function_notation = true)
@test_nowarn parsetree("Â¬-96";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))),
    function_notation = true)

@test_throws ErrorException parsetree("[G][G]-1.2[G]";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))
@test_throws ErrorException parsetree("Â¬-3(";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))

@test_throws ArgumentError parsetree("p";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))

# custom operators ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TERNOP = SoleLogics.NamedOperator{:â‡¶}()
SoleLogics.arity(::Type{typeof(TERNOP)}) = 3

QUATERNOP = SoleLogics.NamedOperator{:â©°}()
SoleLogics.arity(::Type{typeof(QUATERNOP)}) = 4

@test_nowarn parsetree("â‡¶(p, q, r)", [TERNOP]; function_notation=true)
@test_nowarn parsetree("â‡¶(p1, q1, â‡¶(p2, q2, r2))", [TERNOP]; function_notation=true)

@test_nowarn parsetree("â©°(p, q, r, s)", [QUATERNOP]; function_notation=true)
@test_nowarn parsetree("â©°(p1, q1, r1, â©°(p2, q2, r2, s2))",
    [QUATERNOP]; function_notation=true)

# custom relations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

struct _TestRel <: AbstractRelation end;
testrel  = _TestRel();
SoleLogics.arity(::Type{_TestRel}) = 2
SoleLogics.syntaxstring(::Type{_TestRel}; kwargs...) = "Test,Relation"

# If AbstractRelationalOperator interface changes, just redefine the following:
struct SoleRelationalOperator{R<:AbstractRelation} <: AbstractRelationalOperator{R} end
(SoleRelationalOperator)(r::AbstractRelation) = SoleRelationalOperator{typeof(r)}()
SoleLogics.syntaxstring(op::SoleRelationalOperator; kwargs...) =
    "ðŸŒ…$(syntaxstring(relationtype(op);  kwargs...))ðŸŒ„"

struct PipeRelationalOperator{R<:AbstractRelation} <: AbstractRelationalOperator{R} end
(PipeRelationalOperator)(r::AbstractRelation) = PipeRelationalOperator{typeof(r)}()
SoleLogics.syntaxstring(op::PipeRelationalOperator; kwargs...) =
    "|$(syntaxstring(relationtype(op);  kwargs...))|"

struct CurlyRelationalOperator{R<:AbstractRelation} <: AbstractRelationalOperator{R} end
(CurlyRelationalOperator)(r::AbstractRelation) = CurlyRelationalOperator{typeof(r)}()
SoleLogics.syntaxstring(op::CurlyRelationalOperator; kwargs...) =
    "{$(syntaxstring(relationtype(op);  kwargs...))}"

struct MyCustomRelationalOperator{R<:AbstractRelation} <: AbstractRelationalOperator{R} end
(MyCustomRelationalOperator)(r::AbstractRelation) = MyCustomRelationalOperator{typeof(r)}()
SoleLogics.syntaxstring(op::MyCustomRelationalOperator; kwargs...) =
    "LEFT CUSTOM PARENTHESIS $(syntaxstring(relationtype(op);  kwargs...)) RIGHT CUSTOM PARENTHESIS"
f = parsetree("LEFT CUSTOM PARENTHESIS G RIGHT CUSTOM PARENTHESIS p âˆ§ Â¬" *
    "LEFT CUSTOM PARENTHESIS G RIGHT CUSTOM PARENTHESIS q", [MyCustomRelationalOperator(globalrel)])

@test_nowarn parsetree("ðŸŒ…GðŸŒ„p âˆ§ Â¬ðŸŒ…GðŸŒ„q", [SoleRelationalOperator(globalrel)])
@test_nowarn parsetree("âˆ§(ðŸŒ…GðŸŒ„p,Â¬ðŸŒ…GðŸŒ„q)", [SoleRelationalOperator(globalrel)];
    function_notation = true)
@test_nowarn parsetree("âˆ§[ðŸŒ…GðŸŒ„p DELIM Â¬ðŸŒ…GðŸŒ„q)", [SoleRelationalOperator(globalrel)];
    function_notation = true, opening_parenthesis = "[", arg_delim = "DELIM")

@test_nowarn parsetree("|G|p   âˆ§ Â¬|G|q", [PipeRelationalOperator(globalrel)])
@test_nowarn parsetree("âˆ§(|G|p,  Â¬|G|q)", [PipeRelationalOperator(globalrel)];
    function_notation = true)

@test_nowarn parsetree("{G}p   âˆ§  Â¬{G}q", [CurlyRelationalOperator(globalrel)])
@test_nowarn parsetree("âˆ§({G}p   ,Â¬{G}q)", [CurlyRelationalOperator(globalrel)];
    function_notation = true)

_f = parsetree("|G|p âˆ§ Â¬{G}q", [CurlyRelationalOperator(globalrel)])
@test syntaxstring(token(children(_f)[1])) == "|G|p" # PipeRelationalOperator not specified
_f = parsetree("âˆ§(|G|p,Â¬{G}q)", [CurlyRelationalOperator(globalrel)];
    function_notation = true)
@test syntaxstring(token(children(_f)[1])) == "|G|p"

_f = parsetree("{Gp âˆ§ Â¬{G}q", [CurlyRelationalOperator(globalrel)])
@test syntaxstring(token(children(_f)[1])) == "{Gp"

@test_nowarn parsetree("Â¬âŸ¨Test,RelationâŸ©[Test,Relation]p",
    [BoxRelationalOperator(testrel), DiamondRelationalOperator(testrel)]
)
end

# parsebaseformula ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@test_throws ErrorException parsebaseformula("")
@test_nowarn parsebaseformula("âŠ¤")
@test_nowarn parsebaseformula("âŠ¤ âˆ§ âŠ¤")
@test_nowarn parsebaseformula("âŠ¤ âˆ§ p")
@test_nowarn parsebaseformula("âŠ¥ âˆ§ â–¡Â¬((pâˆ§Â¬q)â†’r)")
@test_nowarn parsebaseformula("â–¡Â¬((pâˆ§Â¬q)â†’r) âˆ§ âŠ¤")
@test_nowarn parsebaseformula("âŠ¤ âˆ§ (âŠ¥âˆ§Â¬âŠ¤â†’âŠ¤)")

# stress test ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

s = "Â¬((Â¬(([G](âŸ¨GâŸ©(Â¬((Â¬([G](âŸ¨GâŸ©(âŸ¨GâŸ©(q))))) â†’ (Â¬(âŸ¨GâŸ©((Â¬(q)) âˆ§ ([G](p))))))))) âˆ§ (âŸ¨GâŸ©((" *
    "[G](âŸ¨GâŸ©([G](âŸ¨GâŸ©(âŸ¨GâŸ©(q âˆ§ q)))))) âˆ§ (Â¬(âŸ¨GâŸ©((([G](âŸ¨GâŸ©(p))) âˆ§ (âŸ¨GâŸ©(âŸ¨GâŸ©(p)))) âˆ§ (âŸ¨GâŸ©(" *
    "[G](p â†’ p)))))))))) âˆ§ (([G](([G]([G](Â¬((((Â¬(p)) â†’ (âŸ¨GâŸ©(q))) â†’ ((âŸ¨GâŸ©(p)) â†’ (q â†’ p" *
    "))) âˆ§ (âŸ¨GâŸ©(Â¬([G](p)))))))) âˆ§ ([G](âŸ¨GâŸ©([G](Â¬([G]([G](q âˆ§ p))))))))) âˆ§ (Â¬([G]((âŸ¨GâŸ©" *
    "(âŸ¨GâŸ©(Â¬(((âŸ¨GâŸ©(q)) âˆ§ (âŸ¨GâŸ©(q))) â†’ (âŸ¨GâŸ©(q â†’ p)))))) âˆ§ ([G](Â¬(((Â¬(Â¬(q))) â†’ (Â¬(q â†’ p))" *
    ") âˆ§ (([G](p â†’ p)) â†’ ((âŸ¨GâŸ©(p)) â†’ (q â†’ p)))))))))))"
f = parsetree(s)
@test syntaxstring(f) == syntaxstring(parsetree(syntaxstring(f)))
@test syntaxstring(f; function_notation = true) ==
    syntaxstring(
        parseformula(
            syntaxstring(f; function_notation = true); function_notation = true
        );
        function_notation = true
    )

s = "â—Š((Â¬((â—Š(â—Š(((Â¬(Â¬(q))) âˆ§ ((p âˆ§ p) âˆ¨ (Â¬(p)))) â†’ (Â¬(â–¡(Â¬(q))))))) âˆ¨ ((â–¡(((â–¡(â—Š(q))) â†’"  *
    "((p â†’ q) âˆ¨ (â–¡(q)))) â†’ (â—Š(â–¡(â—Š(p)))))) âˆ¨ ((((â–¡(q âˆ¨ p)) â†’ (â—Š(Â¬(q)))) â†’ (((p âˆ¨ q) â†’"  *
    "(â—Š(q))) âˆ§ ((q âˆ¨ p) âˆ§ (â—Š(q))))) âˆ§ ((Â¬((â—Š(p)) âˆ¨ (Â¬(p)))) âˆ§ (â–¡(â—Š(q âˆ§ p)))))))) â†’ ((" *
    "â—Š(Â¬((â–¡((â—Š(q â†’ q)) âˆ¨ (â–¡(â–¡(p))))) âˆ§ (Â¬((Â¬(â—Š(p))) âˆ¨ ((â—Š(q)) âˆ¨ (â–¡(q)))))))) â†’ ((Â¬((Â¬" *
    "(â—Š((q âˆ¨ q) âˆ¨ (â–¡(q))))) â†’ (((Â¬(â–¡(q))) âˆ¨ (â–¡(â—Š(q)))) â†’ (((â—Š(p)) âˆ§ (â—Š(q))) âˆ¨ (Â¬(q âˆ§"  *
    "q)))))) â†’ ((â–¡(â—Š(Â¬(â—Š(Â¬(p)))))) âˆ¨ ((â–¡(â–¡((q â†’ p) âˆ§ (p âˆ§ p)))) âˆ¨ (((â—Š(â—Š(p))) â†’ ((p â†’" *
    "q) âˆ§ (p â†’ q))) âˆ§ (â–¡((p âˆ¨ q) âˆ§ (â—Š(q))))))))))"
f = parsetree(s)
@test syntaxstring(f) == syntaxstring(parsetree(syntaxstring(f)))
@test syntaxstring(f; function_notation = true) ==
    syntaxstring(
        parseformula(
            syntaxstring(f; function_notation = true); function_notation = true
        );
        function_notation = true
    )

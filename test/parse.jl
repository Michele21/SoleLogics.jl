
@testset "Parsing" begin

@test_nowarn parseformulatree("p")
@test_nowarn parseformulatree("âŠ¤")

@test parseformulatree("Â¬pâˆ§q") == parseformulatree("Â¬(p)âˆ§q")
@test parseformulatree("Â¬pâˆ§q") != parseformulatree("Â¬(pâˆ§q)")

@test_nowarn parseformula("p")

@test_nowarn Â¬ parseformula("p")
@test_nowarn Â¬ parseformulatree("p")
@test_nowarn Â¬ parseformulatree("(sâˆ§z)", propositionallogic())
@test_nowarn Â¬ parseformula("p", propositionallogic())

@test_nowarn parseformulatree("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", [NEGATION, CONJUNCTION])
@test_nowarn parseformulatree("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", [NEGATION])
@test_nowarn parseformulatree("Â¬pâˆ§qâˆ§{Â¬sâˆ§Â¬z}",
    opening_bracket=Symbol("{"), closing_bracket=Symbol("}"))
@test_nowarn parseformulatree("Â¬pâˆ§qâˆ§ A Â¬sâˆ§Â¬z    B",
    opening_bracket=Symbol("A"), closing_bracket=Symbol("B"))

@test operatorstype(
        logic(parseformula("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", [BOX]))) <: SoleLogics.BaseModalOperators
@test !(operatorstype(
    logic(parseformula("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", [BOX]))) <: SoleLogics.BasePropositionalOperators)
@test !(operatorstype(logic(
    parseformula("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", modallogic()))) <: SoleLogics.BasePropositionalOperators)
@test (@test_nowarn operatorstype(
    logic(parseformula("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)"))) <: SoleLogics.BasePropositionalOperators)

@test_nowarn parseformulatree("Â¬pâˆ§qâ†’(Â¬sâˆ§Â¬z)")

@test syntaxstring(parseformulatree("âŸ¨GâŸ©p")) == "âŸ¨GâŸ©(p)"
@test syntaxstring(parseformulatree("[G]p")) == "[G](p)"

@test_nowarn parseformulatree("âŸ¨GâŸ©p", [DiamondRelationalOperator{GlobalRel}()])

@test alphabet(logic(parseformula("pâ†’q"))) == AlphabetOfAny{String}()


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ function notation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@test syntaxstring(parseformulatree("pâˆ§q"); function_notation = true) == "âˆ§(p, q)"
@test syntaxstring(parseformulatree("pâ†’q"); function_notation = true) == "â†’(p, q)"

@test filter(!isspace, syntaxstring(parseformulatree("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)");
    function_notation = true)) == "âˆ§(Â¬(p),âˆ§(q,âˆ§(Â¬(s),Â¬(z))))"


@test_nowarn parseformulatree("â†’(âˆ§(Â¬p, q), âˆ§(Â¬s, Â¬z))", function_notation=true)
@test_nowarn parseformulatree("â†’(âˆ§(Â¬p; q); âˆ§(Â¬s; Â¬z))",
    function_notation=true, arg_delimeter = Symbol(";"))
@test_nowarn parseformulatree("â†’{âˆ§{Â¬p; q}; âˆ§{Â¬s; Â¬z}}", function_notation=true,
    opening_bracket = Symbol("{"), closing_bracket = Symbol("}"),
    arg_delimeter = Symbol(";"))


@test filter(!isspace, syntaxstring(parseformulatree("Â¬pâˆ§qâ†’(Â¬sâˆ§Â¬z)");
    function_notation = true)) == "â†’(âˆ§(Â¬(p),q),âˆ§(Â¬(s),Â¬(z)))"
@test filter(!isspace, syntaxstring(
    parseformulatree("Â¬pâˆ§qâ†’AÂ¬sâˆ§Â¬zB",
        opening_bracket = Symbol("A"),
        closing_bracket = Symbol("B"));
    function_notation = true)) == "â†’(âˆ§(Â¬(p),q),âˆ§(Â¬(s),Â¬(z)))"
@test_nowarn parseformulatree("Â¬pâˆ§qâ†’     (Â¬sâˆ§Â¬z)")
@test parseformulatree("â–¡pâˆ§   qâˆ§(â–¡sâˆ§â—Šz)", [BOX]) == parseformulatree("â–¡pâˆ§   qâˆ§(â–¡sâˆ§â—Šz)")
@test syntaxstring(parseformulatree("â—Š â—Š â—Š â—Š pâˆ§q"); function_notation = true) ==
    "âˆ§(â—Š(â—Š(â—Š(â—Š(p)))), q)"
@test syntaxstring(parseformulatree("Â¬Â¬Â¬ â–¡â–¡â–¡ â—Šâ—Šâ—Š p âˆ§ Â¬Â¬Â¬ q"); function_notation = true) ==
    "âˆ§(Â¬(Â¬(Â¬(â–¡(â–¡(â–¡(â—Š(â—Š(â—Š(p))))))))), Â¬(Â¬(Â¬(q))))"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ malformed input ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@test_throws ErrorException parseformulatree("")
@test_throws ErrorException parseformulatree("Â¬pâ—Š")
@test_throws ErrorException parseformulatree("Â¬pâ—Šq")
@test_throws ErrorException parseformulatree("â—ŠÂ¬pâ—Š")
@test_throws ErrorException parseformulatree("â—ŠÂ¬pâ—Šq")
@test_throws ErrorException parseformulatree("(pâˆ§q", [NEGATION, CONJUNCTION])
@test_throws ErrorException parseformulatree("))))", [CONJUNCTION])
@test_throws ErrorException parseformulatree("âŸ¨GâŸ©p Â¬âŸ¨GâŸ©q",
    [DiamondRelationalOperator(globalrel)])
@test_throws ErrorException parseformulatree("Â¬[[G]]p", [BoxRelationalOperator(globalrel)])

@test_throws ErrorException parseformulatree(""; function_notation = true)
@test_throws ErrorException parseformulatree("Â¬pâ—Š"; function_notation = true)
@test_throws ErrorException parseformulatree("Â¬pâ—Šq"; function_notation = true)
@test_throws ErrorException parseformulatree("â—ŠÂ¬pâ—Š"; function_notation = true)
@test_throws ErrorException parseformulatree("â—ŠÂ¬pâ—Šq"; function_notation = true)
@test_throws ErrorException parseformulatree("(pâˆ§q", [NEGATION, CONJUNCTION];
    function_notation = true)
@test_throws ErrorException parseformulatree("))))", [CONJUNCTION];
    function_notation = true)
@test_throws ErrorException parseformulatree("Â¬[[G]]p", [BoxRelationalOperator(globalrel)];
    function_notation = true)

@test_throws ErrorException parseformulatree("Â¬pâˆ§qâˆ§(Â¬sâˆ§Â¬z)", opening_bracket=Symbol("{"))
@test_throws ErrorException parseformulatree("Â¬pâˆ§qâˆ§{Â¬sâˆ§Â¬z)",
    opening_bracket=Symbol("{"), closing_bracket=Symbol("}"))
@test_throws ErrorException parseformulatree("Â¬pâˆ§qâˆ§ C Â¬sâˆ§Â¬z    B",
    opening_bracket=Symbol("A"), closing_bracket=Symbol("B"))

@test_throws ErrorException parseformulatree("Â¬pâˆ§qâ†’ |Â¬sâˆ§Â¬z|",
    opening_bracket = Symbol("|"), closing_bracket = Symbol("|"))

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ parsing propositions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@test_nowarn parseformulatree("Â¬1â†’0";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))
@test_nowarn parseformulatree("Â¬0.42âˆ§1";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))
@test_nowarn parseformulatree("Â¬-96";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))

@test_nowarn parseformulatree("â†’(Â¬1,0)";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))),
    function_notation = true)
@test_nowarn parseformulatree("â†’(Â¬1;0)";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))),
    function_notation = true, arg_delimeter = Symbol(";"))
@test_nowarn parseformulatree("â†’(Â¬1/0)";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))),
    function_notation = true, arg_delimeter = Symbol("/"))
@test_nowarn parseformulatree("âˆ§(Â¬0.42,1)";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))),
    function_notation = true)
@test_nowarn parseformulatree("Â¬-96";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))),
    function_notation = true)

@test_throws ErrorException parseformulatree("[G][G]-1.2[G]",
    [BoxRelationalOperator(globalrel)];
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))
@test_throws ErrorException parseformulatree("Â¬-3(";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))

@test_throws ArgumentError parseformulatree("p";
    proposition_parser = (x -> Proposition{Float64}(parse(Float64, x))))

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ custom operator ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

struct _TestRel <: AbstractRelation end;
testrel  = _TestRel();
SoleLogics.arity(::Type{_TestRel}) = 2
SoleLogics.syntaxstring(::Type{_TestRel}; kwargs...) = "Test,Relation"

# If AbstractRelationalOperator interface changes, just redefine the following:
struct SoleRelationalOperator{R<:AbstractRelation} <: AbstractRelationalOperator{R} end
(SoleRelationalOperator)(r::AbstractRelation) = SoleRelationalOperator{typeof(r)}()
SoleLogics.syntaxstring(op::SoleRelationalOperator; kwargs...) =
    "ðŸŒ…$(syntaxstring(relationtype(op);  kwargs...))ðŸŒ„"

struct PipeRelationalOperator{R<:AbstractRelation} <: AbstractRelationalOperator{R} end
(PipeRelationalOperator)(r::AbstractRelation) = PipeRelationalOperator{typeof(r)}()
SoleLogics.syntaxstring(op::PipeRelationalOperator; kwargs...) =
    "|$(syntaxstring(relationtype(op);  kwargs...))|"

struct CurlyRelationalOperator{R<:AbstractRelation} <: AbstractRelationalOperator{R} end
(CurlyRelationalOperator)(r::AbstractRelation) = CurlyRelationalOperator{typeof(r)}()
SoleLogics.syntaxstring(op::CurlyRelationalOperator; kwargs...) =
    "{$(syntaxstring(relationtype(op);  kwargs...))}"

struct MyCustomRelationalOperator{R<:AbstractRelation} <: AbstractRelationalOperator{R} end
(MyCustomRelationalOperator)(r::AbstractRelation) = MyCustomRelationalOperator{typeof(r)}()
SoleLogics.syntaxstring(op::MyCustomRelationalOperator; kwargs...) =
    "LEFT CUSTOM BRACKET $(syntaxstring(relationtype(op);  kwargs...)) RIGHT CUSTOM BRACKET"
f = parseformulatree("LEFT CUSTOM BRACKET G RIGHT CUSTOM BRACKET p âˆ§ Â¬" *
    "LEFT CUSTOM BRACKET G RIGHT CUSTOM BRACKET q", [MyCustomRelationalOperator(globalrel)])

@test_nowarn parseformulatree("ðŸŒ…GðŸŒ„p âˆ§ Â¬ðŸŒ…GðŸŒ„q", [SoleRelationalOperator(globalrel)])
@test_nowarn parseformulatree("âˆ§(ðŸŒ…GðŸŒ„p,Â¬ðŸŒ…GðŸŒ„q)", [SoleRelationalOperator(globalrel)];
    function_notation = true)
@test_nowarn parseformulatree("âˆ§[ðŸŒ…GðŸŒ„p SEP Â¬ðŸŒ…GðŸŒ„q)", [SoleRelationalOperator(globalrel)];
    function_notation = true, opening_bracket = Symbol("["), arg_delimeter = Symbol("SEP"))

@test_nowarn parseformulatree("|G|p   âˆ§ Â¬|G|q", [PipeRelationalOperator(globalrel)])
@test_nowarn parseformulatree("âˆ§(|G|p,  Â¬|G|q)", [PipeRelationalOperator(globalrel)];
    function_notation = true)

@test_nowarn parseformulatree("{G}p   âˆ§  Â¬{G}q", [CurlyRelationalOperator(globalrel)])
@test_nowarn parseformulatree("âˆ§({G}p   ,Â¬{G}q)", [CurlyRelationalOperator(globalrel)];
    function_notation = true)

_f = parseformulatree("|G|p âˆ§ Â¬{G}q", [CurlyRelationalOperator(globalrel)])
@test syntaxstring(token(children(_f)[1])) == "|G|p" # PipeRelationalOperator not specified
_f = parseformulatree("âˆ§(|G|p,Â¬{G}q)", [CurlyRelationalOperator(globalrel)];
    function_notation = true)
@test syntaxstring(token(children(_f)[1])) == "|G|p"

_f = parseformulatree("{Gp âˆ§ Â¬{G}q", [CurlyRelationalOperator(globalrel)])
@test syntaxstring(token(children(_f)[1])) == "{Gp"

@test_nowarn parseformulatree("Â¬âŸ¨Test,RelationâŸ©[Test,Relation]p",
    [BoxRelationalOperator(testrel), DiamondRelationalOperator(testrel)]
)
end
